
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN AT CLASS COLON COMMA DBLCOLON DEDENT DEF DIV EOF EQ FATARROW GRAVE GT IF INDENT LONGFATARROW LONGTHINARROW LPAR LT MINUS MULT NEQ NEWLINE NFATARROW NLONGFATARROW NLONGTHINARROW NOUN NTHINARROW NUMBER PLUS PREDICATE RETURN RPAR SEMICOLON SNIPPET STRING TERMINATOR THINARROW VARIABLE VERB WSRoot : Root : BodyRoot : Block TERMINATORBlock : INDENT Body DEDENTBody : LineBody : Body TERMINATOR LineBody : Body TERMINATORLine : Expression\n                | StatementExpression : Clause\n                | TermTerm : VARIABLE\n                | NOUN\n                | STRINGTerm : SNIPPETParExpr : LPAR Expression RPARParExpr : LPAR RPARStatement : Class\n                     | MethodClass : CLASS Identifier BlockMethod : DEF Identifier ParExpr Block Clause : Expression VERB ExpressionClause : Expression VERBClause : VERB ExpressionClause : VERBClause : ExpressionIdentifier : VERB\n                    | NOUN'
    
_lr_action_items = {'STRING':([0,5,17,23,24,33,],[15,15,15,15,15,15,]),'SNIPPET':([0,5,17,23,24,33,],[11,11,11,11,11,11,]),'LPAR':([20,22,25,],[-27,-28,33,]),'NOUN':([0,5,6,13,17,23,24,33,],[3,3,22,22,3,3,3,3,]),'TERMINATOR':([2,3,4,7,8,9,10,11,12,14,15,16,17,18,19,23,24,27,28,29,30,31,34,],[-9,-13,-12,23,-11,-5,-8,-15,-10,-18,-14,26,-25,-19,23,-7,-23,-24,-4,-20,-6,-22,-21,]),'$end':([0,1,2,3,4,7,8,9,10,11,12,14,15,17,18,23,24,26,27,28,29,30,31,34,],[-1,0,-9,-13,-12,-2,-11,-5,-8,-15,-10,-18,-14,-25,-19,-7,-23,-3,-24,-4,-20,-6,-22,-21,]),'VARIABLE':([0,5,17,23,24,33,],[4,4,4,4,4,4,]),'VERB':([0,3,4,5,6,8,10,11,12,13,15,17,23,24,27,31,33,36,],[17,-13,-12,17,20,-11,24,-15,-10,20,-14,17,17,17,24,24,17,24,]),'INDENT':([0,20,21,22,32,35,37,],[5,-27,5,-28,5,-17,-16,]),'DEDENT':([2,3,4,8,9,10,11,12,14,15,17,18,19,23,24,27,28,29,30,31,34,],[-9,-13,-12,-11,-5,-8,-15,-10,-18,-14,-25,-19,28,-7,-23,-24,-4,-20,-6,-22,-21,]),'RPAR':([3,4,8,11,12,15,17,24,27,31,33,36,],[-13,-12,-11,-15,-10,-14,-25,-23,-24,-22,35,37,]),'CLASS':([0,5,23,],[6,6,6,]),'DEF':([0,5,23,],[13,13,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Root':([0,],[1,]),'Clause':([0,5,17,23,24,33,],[12,12,12,12,12,12,]),'Identifier':([6,13,],[21,25,]),'Expression':([0,5,17,23,24,33,],[10,10,27,10,31,36,]),'Class':([0,5,23,],[14,14,14,]),'ParExpr':([25,],[32,]),'Block':([0,21,32,],[16,29,34,]),'Statement':([0,5,23,],[2,2,2,]),'Body':([0,5,],[7,19,]),'Term':([0,5,17,23,24,33,],[8,8,8,8,8,8,]),'Method':([0,5,23,],[18,18,18,]),'Line':([0,5,23,],[9,9,30,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Root","S'",1,None,None,None),
  ('Root -> <empty>','Root',0,'p_root_empty','parser.py',18),
  ('Root -> Body','Root',1,'p_root_body','parser.py',22),
  ('Root -> Block TERMINATOR','Root',2,'p_root_block','parser.py',26),
  ('Block -> INDENT Body DEDENT','Block',3,'p_block_body','parser.py',30),
  ('Body -> Line','Body',1,'p_body_line','parser.py',34),
  ('Body -> Body TERMINATOR Line','Body',3,'p_body_body_line','parser.py',38),
  ('Body -> Body TERMINATOR','Body',2,'p_body_body','parser.py',43),
  ('Line -> Expression','Line',1,'p_line','parser.py',47),
  ('Line -> Statement','Line',1,'p_line','parser.py',48),
  ('Expression -> Clause','Expression',1,'p_expr','parser.py',52),
  ('Expression -> Term','Expression',1,'p_expr','parser.py',53),
  ('Term -> VARIABLE','Term',1,'p_term','parser.py',57),
  ('Term -> NOUN','Term',1,'p_term','parser.py',58),
  ('Term -> STRING','Term',1,'p_term','parser.py',59),
  ('Term -> SNIPPET','Term',1,'p_snippet','parser.py',63),
  ('ParExpr -> LPAR Expression RPAR','ParExpr',3,'p_parexpr','parser.py',67),
  ('ParExpr -> LPAR RPAR','ParExpr',2,'p_parexpr_empty','parser.py',71),
  ('Statement -> Class','Statement',1,'p_stmt','parser.py',75),
  ('Statement -> Method','Statement',1,'p_stmt','parser.py',76),
  ('Class -> CLASS Identifier Block','Class',3,'p_class','parser.py',80),
  ('Method -> DEF Identifier ParExpr Block','Method',4,'p_def','parser.py',84),
  ('Clause -> Expression VERB Expression','Clause',3,'p_clause1','parser.py',88),
  ('Clause -> Expression VERB','Clause',2,'p_clause2','parser.py',92),
  ('Clause -> VERB Expression','Clause',2,'p_clause3','parser.py',96),
  ('Clause -> VERB','Clause',1,'p_clause4','parser.py',100),
  ('Clause -> Expression','Clause',1,'p_clause5','parser.py',104),
  ('Identifier -> VERB','Identifier',1,'p_id','parser.py',108),
  ('Identifier -> NOUN','Identifier',1,'p_id','parser.py',109),
]
